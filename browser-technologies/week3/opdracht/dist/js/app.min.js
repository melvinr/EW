"use strict";var APP=APP||{};APP.launcher=function(){function t(){document.addEventListener("DOMContentLoaded",function(){APP.data.init()})}return{init:t}}(),APP.launcher.init();var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};APP.data=function(){function t(t){return new Promise(function(e,r){var n=new XMLHttpRequest;n.open("GET",t,!0),n.onload=function(){this.status>=200&&this.status<300?e(n.response):r({status:this.status,statusText:n.statusText})},n.onerror=function(){r({status:this.status,statusText:n.statusText})},n.send()})}function e(){APP.data.request("../opdracht/dist/data/shirts.json").then(function(t){var e=JSON.parse(t);APP.router.init(e)})["catch"](function(t){console.error("Oops, there was an error!",t.statusText)})}function r(t){function e(){var t=this.getAttribute("data-id");o.push(t),this.classList.add("active"),this.innerHTML="Remove from favourites";for(var e=0;e<o.length;e++){for(var r=o[e],a=0,i=0;i<o.length;i++)o[i]==o[e]&&a++;if(a>1)for(var s=0;s<u.length;s++)u[s]==r&&(u.splice(s,1),s-=1,this.classList.remove("active"),console.log(this),this.innerHTML="Add to favourites")}console.log(u),n("shirtID",u)}var r=document.querySelectorAll(".favourite__btn");[].forEach.call(r,function(t){t.addEventListener("click",e,!1)})}function n(t,e){function r(t,e,r){var n=new Date;n.setTime(n.getTime()+24*r*60*60*1e3);var o="; expires="+n.toGMTString();document.cookie=t+"="+e+o+"; path=/"}function n(t){for(var e=t+"=",r=document.cookie.split(";"),n=0,o=r.length;o>n;n++){for(var a=r[n];" "===a.charAt(0);)a=a.substring(1,a.length);if(0===a.indexOf(e))return a.substring(e.length,a.length)}return null}var o;try{localStorage.test=1,o=!0}catch(a){o=!1}if("undefined"!=typeof e&&null!==e&&("object"===("undefined"==typeof e?"undefined":_typeof(e))&&(e=JSON.stringify(e)),o?localStorage.setItem(t,e):r(t,e,30)),"undefined"==typeof e){o?data=localStorage.getItem(t):data=n(t);try{data=JSON.parse(data)}catch(a){data=data}return data}null===e&&(o?localStorage.removeItem(t):r(t,"",-1))}try{if(localStorage.test=1,null===localStorage.getItem("shirtID")){var o=[];console.log(o)}else{var o=JSON.parse(localStorage.getItem("shirtID"));console.log(o)}}catch(a){var i=function(t){for(var e=t+"=",r=document.cookie.split(";"),n=0,o=r.length;o>n;n++){for(var a=r[n];" "===a.charAt(0);)a=a.substring(1,a.length);if(0===a.indexOf(e))return a.substring(e.length,a.length)}return null},s=i("shirtID");if(null===s)var o=[];else var o=JSON.parse(s);console.log(o)}var u=o;return{request:t,init:e,storage:r,storageFallback:n}}(),APP.page=function(){function t(t){APP.data.request("../opdracht/dist/templates/shirts.mst").then(function(e){n.innerHTML=Mustache.render(e,t),APP.data.storage()})["catch"](function(t){console.error("There was an error!",t.statusText)})}function e(t,e){var r=t.filter(function(t){return-1!=e.indexOf(t.id)});APP.data.request("../opdracht/dist/templates/shirt-detail.mst").then(function(t){n.innerHTML=Mustache.render(t,r),APP.data.storage()})["catch"](function(t){console.error("There was an error!",t.statusText)})}function r(t){try{localStorage.test=1;var e=localStorage.getItem("shirtID")}catch(r){var o=function(t){for(var e=t+"=",r=document.cookie.split(";"),n=0,o=r.length;o>n;n++){for(var a=r[n];" "===a.charAt(0);)a=a.substring(1,a.length);if(0===a.indexOf(e))return a.substring(e.length,a.length)}return null},a=o("shirtID");if(null===a)var e=[];else var e=JSON.parse(a)}var i=t.filter(function(t){return-1!=e.indexOf(t.id)});APP.data.request("../opdracht/dist/templates/favourites.mst").then(function(t){n.innerHTML=Mustache.render(t,i),APP.data.storage()})["catch"](function(t){console.error("There was an error!",t.statusText)})}var n=document.querySelector("main");return{shirts:t,shirtDetail:e,favourites:r}}(),APP.router=function(){function t(t){window.location.hash||(window.location="#shirts"),routie({shirts:function(){APP.page.shirts(t)},"shirt-:ID":function(e){APP.page.shirtDetail(t,e)},favourites:function(){APP.page.favourites(t)}})}return{init:t}}();
//# sourceMappingURL=data:application/json;base64,
