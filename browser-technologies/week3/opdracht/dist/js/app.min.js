"use strict";var APP=APP||{};APP.launcher=function(){function t(){document.addEventListener("DOMContentLoaded",function(){APP.data.init()})}return{init:t}}(),APP.launcher.init(),APP.data=function(){function t(t){return new Promise(function(e,n){var r=new XMLHttpRequest;r.open("GET",t,!0),r.onload=function(){this.status>=200&&this.status<300?e(r.response):n({status:this.status,statusText:r.statusText})},r.onerror=function(){n({status:this.status,statusText:r.statusText})},r.send()})}function e(){APP.data.request("../opdracht/dist/data/shirts.json").then(function(t){var e=JSON.parse(t);APP.router.init(e)})["catch"](function(t){console.error("Oops, there was an error!",t.statusText)})}function n(t){function e(){var t=this.getAttribute("data-id");r.push(t);for(var e=0;e<r.length;e++){for(var n=r[e],a=0,s=0;s<r.length;s++)r[s]==r[e]&&a++;if(a>1)for(var i=0;i<o.length;i++)o[i]==n&&(o.splice(i,1),i-=1)}console.log(r),localStorage.setItem("shirtID",JSON.stringify(o)),window.location.reload()}var n=document.querySelectorAll(".favourite__btn");[].forEach.call(n,function(t){t.addEventListener("click",e,!1)})}if(null===localStorage.getItem("shirtID")){var r=[];console.log("Nieuw")}else{var r=JSON.parse(localStorage.getItem("shirtID"));console.log("Oud"),console.log(r)}var o=r;return{request:t,init:e,storage:n}}(),APP.page=function(){function t(t){APP.data.request("../opdracht/dist/templates/shirts.mst").then(function(e){r.innerHTML=Mustache.render(e,t),APP.data.storage()})["catch"](function(t){console.error("There was an error!",t.statusText)})}function e(t,e){var n=_.filter(t,function(t){return-1!=e.indexOf(t.id)});APP.data.request("../opdracht/dist/templates/shirt-detail.mst").then(function(t){r.innerHTML=Mustache.render(t,n),APP.data.storage()})["catch"](function(t){console.error("There was an error!",t.statusText)})}function n(t){var e=localStorage.getItem("shirtID"),n=_.filter(t,function(t){return-1!=e.indexOf(t.id)});console.log(n),APP.data.request("../opdracht/dist/templates/favourites.mst").then(function(t){r.innerHTML=Mustache.render(t,n),APP.data.storage()})["catch"](function(t){console.error("There was an error!",t.statusText)})}var r=document.querySelector("main");return{shirts:t,shirtDetail:e,favourites:n}}(),APP.router=function(){function t(t){window.location.hash||(window.location="#shirts"),routie({shirts:function(){APP.page.shirts(t)},"shirt-:ID":function(e){APP.page.shirtDetail(t,e)},favourites:function(){APP.page.favourites(t)}})}return{init:t}}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5taW4uanMiLCJhcHBfbGF1bmNoZXItbW9kdWxlLmpzIiwiZGF0YS1tb2R1bGUuanMiLCJwYWdlLW1vZHVsZS5qcyIsInJvdXRlci1tb2R1bGUuanMiXSwibmFtZXMiOlsiQVBQIiwibGF1bmNoZXIiLCJpbml0IiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZGF0YSIsInJlcXVlc3QiLCJ1cmwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsIm9ubG9hZCIsInRoaXMiLCJzdGF0dXMiLCJyZXNwb25zZSIsInN0YXR1c1RleHQiLCJvbmVycm9yIiwic2VuZCIsInRoZW4iLCJKU09OIiwicGFyc2UiLCJyb3V0ZXIiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJzdG9yYWdlIiwiSUQiLCJzdG9yZUlEIiwiZ2V0QXR0cmlidXRlIiwiYXJyYXlJRCIsInB1c2giLCJoIiwibGVuZ3RoIiwiY3VySXRlbSIsImZvdW5kQ291bnQiLCJpIiwiaiIsIm5ld0FycmF5SUQiLCJzcGxpY2UiLCJsb2ciLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwic3RyaW5naWZ5Iiwid2luZG93IiwibG9jYXRpb24iLCJyZWxvYWQiLCJmYXZvdXJpdGVCdXR0b25zIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJjYWxsIiwiYnV0dG9uIiwiZ2V0SXRlbSIsInBhZ2UiLCJzaGlydHMiLCJ0ZW1wbGF0ZSIsIl9tYWluU2VsZWN0b3IiLCJpbm5lckhUTUwiLCJNdXN0YWNoZSIsInJlbmRlciIsInNoaXJ0RGV0YWlsIiwiZGV0YWlsRGF0YSIsIl8iLCJmaWx0ZXIiLCJjIiwiaW5kZXhPZiIsImlkIiwiZmF2b3VyaXRlcyIsImZhdm91cml0ZURhdGEiLCJxdWVyeVNlbGVjdG9yIiwiaGFzaCIsInJvdXRpZSIsInNoaXJ0LTpJRCJdLCJtYXBwaW5ncyI6IkFBQUEsWUNHQSxJQUFJQSxLQUFNQSxPQUtWQSxL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YyxhQUFhVyxRQUFRLFdBRzFCZ0IsRUFBZ0JOLEVBQUVDLE9BQU81RCxFQUFNLFNBQVM2RCxHQUN4QyxNQUEyQixJQUFwQnJDLEVBQUdzQyxRQUFRRCxFQUFFRSxLQUd4QjFDLFNBQVFnQixJQUFJNEIsR0FFWnRFLElBQUlLLEtBQUtDLFFBQVEsNkNBQ1plLEtBQUssU0FBVW9DLEdBQ1pDLEVBQWNDLFVBQVlDLFNBQVNDLE9BQU9KLEVBQVVhLEdBQ3BEdEUsSUFBSUssS0FBS3VCLFlBSGpCNUIsU0FLVyxTQUFVeUIsR0FDYkMsUUFBUUMsTUFBTSxzQkFBdUJGLEVBQUlQLGNBN0NyRCxHQUFJd0MsR0FBZ0J2RCxTQUFTb0UsY0FBYyxPQWlEM0MsUUFDSWYsT0FBUUEsRUFDUk0sWUFBYUEsRUFDYk8sV0FBWUEsTUN0RHBCckUsSUFBSXdCLE9BQVMsV0FDVCxRQUFTdEIsR0FBTUcsR0FDTnlDLE9BQU9DLFNBQVN5QixPQUNqQjFCLE9BQU9DLFNBQVcsV0FFdEIwQixRQUNJakIsT0FBVSxXQUNOeEQsSUFBSXVELEtBQUtDLE9BQU9uRCxJQUVwQnFFLFlBQWEsU0FBUzdDLEdBQ2xCN0IsSUFBSXVELEtBQUtPLFlBQVl6RCxFQUFNd0IsSUFFL0J3QyxXQUFjLFdBQ1ZyRSxJQUFJdUQsS0FBS2MsV0FBV2hFLE1BS2hDLE9BQ0lILEtBQU1BIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBcblx0TkFNRVNQQUNFIFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIEFQUCA9IEFQUCB8fCB7fTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBcbiAgICBMQVVOQ0ggQVBQXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5BUFAubGF1bmNoZXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBBUFAuZGF0YS5pbml0KCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpbml0OiBpbml0XG4gICAgfTtcbn0oKTtcblxuQVBQLmxhdW5jaGVyLmluaXQoKTtcblwidXNlIHN0cmljdFwiO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIFxuXHREQVRBIFJFUVVFU1RcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbkFQUC5kYXRhID0gZnVuY3Rpb24gKCkge1xuXG4gICAgLyogR0xPQkFMIFZBUklBQkxFUyAqL1xuICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInNoaXJ0SURcIikgPT09IG51bGwpIHtcbiAgICAgICAgdmFyIGFycmF5SUQgPSBbXTtcbiAgICAgICAgY29uc29sZS5sb2coXCJOaWV1d1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYXJyYXlJRCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NoaXJ0SUQnKSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiT3VkXCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhhcnJheUlEKTtcbiAgICB9XG4gICAgdmFyIG5ld0FycmF5SUQgPSBhcnJheUlEO1xuXG4gICAgZnVuY3Rpb24gcmVxdWVzdCh1cmwpIHtcbiAgICAgICAgLy8gc3JjOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwMDA4MTE0L2hvdy1kby1pLXByb21pc2lmeS1uYXRpdmUteGhyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB4aHIub3BlbignR0VUJywgdXJsLCB0cnVlKTtcbiAgICAgICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHhoci5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB4aHIuc2VuZCgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgQVBQLmRhdGEucmVxdWVzdCgnLi4vb3BkcmFjaHQvZGlzdC9kYXRhL3NoaXJ0cy5qc29uJykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG4gICAgICAgICAgICBBUFAucm91dGVyLmluaXQoZGF0YSk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ09vcHMsIHRoZXJlIHdhcyBhbiBlcnJvciEnLCBlcnIuc3RhdHVzVGV4dCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBzdG9yYWdlKElEKSB7XG5cbiAgICAgICAgdmFyIGZhdm91cml0ZUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZmF2b3VyaXRlX19idG4nKTtcblxuICAgICAgICBbXS5mb3JFYWNoLmNhbGwoZmF2b3VyaXRlQnV0dG9ucywgZnVuY3Rpb24gKGJ1dHRvbikge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3RvcmVJRCwgZmFsc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBzdG9yZUlEKCkge1xuICAgICAgICAgICAgdmFyIElEID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKTtcbiAgICAgICAgICAgIGFycmF5SUQucHVzaChJRCk7XG5cbiAgICAgICAgICAgIC8qICBDSEVDSyBGT1IgRFVQTElDQVRFRCBJRCdzIC0gc3JjOiBodHRwczovL2pzZmlkZGxlLm5ldC9CdW1ibGVCMm5hL1h2Z1RiLzEvICovXG4gICAgICAgICAgICBmb3IgKHZhciBoID0gMDsgaCA8IGFycmF5SUQubGVuZ3RoOyBoKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9IGFycmF5SURbaF07XG4gICAgICAgICAgICAgICAgdmFyIGZvdW5kQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBhcnJheSBmb3IgaXRlbVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlJRC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJyYXlJRFtpXSA9PSBhcnJheUlEW2hdKSBmb3VuZENvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmb3VuZENvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgcmVwZWF0ZWQgaXRlbSBmcm9tIG5ldyBhcnJheVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5ld0FycmF5SUQubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdBcnJheUlEW2pdID09IGN1ckl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdBcnJheUlELnNwbGljZShqLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqID0gaiAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGFycmF5SUQpO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJzaGlydElEXCIsIEpTT04uc3RyaW5naWZ5KG5ld0FycmF5SUQpKTtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgaW5pdDogaW5pdCxcbiAgICAgICAgc3RvcmFnZTogc3RvcmFnZVxuICAgIH07XG59KCk7XG4ndXNlIHN0cmljdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogXG5cdFBBR0UgTU9EVUxFIFt3aXRoIFByb21pc2VdXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5BUFAucGFnZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBfbWFpblNlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWFpbicpO1xuXG4gICAgZnVuY3Rpb24gc2hpcnRzKGRhdGEpIHtcbiAgICAgICAgQVBQLmRhdGEucmVxdWVzdCgnLi4vb3BkcmFjaHQvZGlzdC90ZW1wbGF0ZXMvc2hpcnRzLm1zdCcpLnRoZW4oZnVuY3Rpb24gKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICBfbWFpblNlbGVjdG9yLmlubmVySFRNTCA9IE11c3RhY2hlLnJlbmRlcih0ZW1wbGF0ZSwgZGF0YSk7XG4gICAgICAgICAgICBBUFAuZGF0YS5zdG9yYWdlKCk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1RoZXJlIHdhcyBhbiBlcnJvciEnLCBlcnIuc3RhdHVzVGV4dCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBzaGlydERldGFpbChkYXRhLCBJRCkge1xuICAgICAgICAvKiBGaWx0ZXIgSUQgKi9cbiAgICAgICAgdmFyIGRldGFpbERhdGEgPSBfLmZpbHRlcihkYXRhLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgcmV0dXJuIElELmluZGV4T2YoYy5pZCkgIT0gLTE7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIEFQUC5kYXRhLnJlcXVlc3QoJy4uL29wZHJhY2h0L2Rpc3QvdGVtcGxhdGVzL3NoaXJ0LWRldGFpbC5tc3QnKS50aGVuKGZ1bmN0aW9uICh0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgX21haW5TZWxlY3Rvci5pbm5lckhUTUwgPSBNdXN0YWNoZS5yZW5kZXIodGVtcGxhdGUsIGRldGFpbERhdGEpO1xuICAgICAgICAgICAgQVBQLmRhdGEuc3RvcmFnZSgpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdUaGVyZSB3YXMgYW4gZXJyb3IhJywgZXJyLnN0YXR1c1RleHQpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZmF2b3VyaXRlcyhkYXRhKSB7XG4gICAgICAgIHZhciBJRCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzaGlydElEJyk7XG5cbiAgICAgICAgLyogRmlsdGVyIElEICovXG4gICAgICAgIHZhciBmYXZvdXJpdGVEYXRhID0gXy5maWx0ZXIoZGF0YSwgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHJldHVybiBJRC5pbmRleE9mKGMuaWQpICE9IC0xO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zb2xlLmxvZyhmYXZvdXJpdGVEYXRhKTtcblxuICAgICAgICBBUFAuZGF0YS5yZXF1ZXN0KCcuLi9vcGRyYWNodC9kaXN0L3RlbXBsYXRlcy9mYXZvdXJpdGVzLm1zdCcpLnRoZW4oZnVuY3Rpb24gKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICBfbWFpblNlbGVjdG9yLmlubmVySFRNTCA9IE11c3RhY2hlLnJlbmRlcih0ZW1wbGF0ZSwgZmF2b3VyaXRlRGF0YSk7XG4gICAgICAgICAgICBBUFAuZGF0YS5zdG9yYWdlKCk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1RoZXJlIHdhcyBhbiBlcnJvciEnLCBlcnIuc3RhdHVzVGV4dCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzaGlydHM6IHNoaXJ0cyxcbiAgICAgICAgc2hpcnREZXRhaWw6IHNoaXJ0RGV0YWlsLFxuICAgICAgICBmYXZvdXJpdGVzOiBmYXZvdXJpdGVzXG4gICAgfTtcbn0oKTtcbid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAgXG5cdFJPVVRFUiBNT0RVTEUgW3dpdGggcm91dGVyIGxpYjogUm91dGllXVxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuQVBQLnJvdXRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBpbml0KGRhdGEpIHtcbiAgICAgICAgaWYgKCF3aW5kb3cubG9jYXRpb24uaGFzaCkge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gJyNzaGlydHMnO1xuICAgICAgICB9XG4gICAgICAgIHJvdXRpZSh7XG4gICAgICAgICAgICAnc2hpcnRzJzogZnVuY3Rpb24gc2hpcnRzKCkge1xuICAgICAgICAgICAgICAgIEFQUC5wYWdlLnNoaXJ0cyhkYXRhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnc2hpcnQtOklEJzogZnVuY3Rpb24gc2hpcnRJRChJRCkge1xuICAgICAgICAgICAgICAgIEFQUC5wYWdlLnNoaXJ0RGV0YWlsKGRhdGEsIElEKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnZmF2b3VyaXRlcyc6IGZ1bmN0aW9uIGZhdm91cml0ZXMoKSB7XG4gICAgICAgICAgICAgICAgQVBQLnBhZ2UuZmF2b3VyaXRlcyhkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IGluaXRcbiAgICB9O1xufSgpOyIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogXG5cdE5BTUVTUEFDRSBcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbnZhciBBUFAgPSBBUFAgfHwge307XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogXG4gICAgTEFVTkNIIEFQUFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLyBcbkFQUC5sYXVuY2hlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgIFxuICAgIGZ1bmN0aW9uIGluaXQoKSB7ICAgICBcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24gKCkgeyBcbiAgICAgICAgICAgIEFQUC5kYXRhLmluaXQoKTtcbiAgICAgICAgfSk7ICAgICAgICAgICAgXG4gICAgfTsgICAgXG4gICAgXG4gICAgcmV0dXJuIHsgXG4gICAgICAgIGluaXQ6IGluaXRcbiAgICB9O1xuICAgIFxufSgpKTtcblxuQVBQLmxhdW5jaGVyLmluaXQoKTsiLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIFxuXHREQVRBIFJFUVVFU1RcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8gIFxuQVBQLmRhdGEgPSAoZnVuY3Rpb24gKCkge1xuICAgIFxuICAgIC8qIEdMT0JBTCBWQVJJQUJMRVMgKi9cbiAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJzaGlydElEXCIpID09PSBudWxsKSB7IFxuICAgICAgICB2YXIgYXJyYXlJRCA9IFtdO1xuICAgICAgICBjb25zb2xlLmxvZyhcIk5pZXV3XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBhcnJheUlEID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2hpcnRJRCcpKTsgXG4gICAgICAgIGNvbnNvbGUubG9nKFwiT3VkXCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhhcnJheUlEKTtcbiAgICB9XG4gICAgdmFyIG5ld0FycmF5SUQgPSBhcnJheUlEOyBcbiAgICBcbiAgICBmdW5jdGlvbiByZXF1ZXN0KHVybCkgeyAvLyBzcmM6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzAwMDgxMTQvaG93LWRvLWktcHJvbWlzaWZ5LW5hdGl2ZS14aHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgICAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeGhyLnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZWplY3Qoe1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHhoci5zZW5kKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICBBUFAuZGF0YS5yZXF1ZXN0KCcuLi9vcGRyYWNodC9kaXN0L2RhdGEvc2hpcnRzLmpzb24nKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICBBUFAucm91dGVyLmluaXQoZGF0YSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdPb3BzLCB0aGVyZSB3YXMgYW4gZXJyb3IhJywgZXJyLnN0YXR1c1RleHQpO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcbiAgICBcbiAgICBmdW5jdGlvbiBzdG9yYWdlKElEKSB7IFxuICAgIFxuICAgICAgICB2YXIgZmF2b3VyaXRlQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mYXZvdXJpdGVfX2J0bicpOyAgICAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBbXS5mb3JFYWNoLmNhbGwoZmF2b3VyaXRlQnV0dG9ucywgZnVuY3Rpb24oYnV0dG9uKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzdG9yZUlELCBmYWxzZSk7XG4gICAgICAgIH0pOyAgIFxuXG4gICAgICAgIGZ1bmN0aW9uIHN0b3JlSUQoKSB7ICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIElEID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKTtcbiAgICAgICAgICAgIGFycmF5SUQucHVzaChJRCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8qICBDSEVDSyBGT1IgRFVQTElDQVRFRCBJRCdzIC0gc3JjOiBodHRwczovL2pzZmlkZGxlLm5ldC9CdW1ibGVCMm5hL1h2Z1RiLzEvICovXG4gICAgICAgICAgICBmb3IodmFyIGggPSAwOyBoIDwgYXJyYXlJRC5sZW5ndGg7IGgrKykgeyBcbiAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9IGFycmF5SURbaF07XG4gICAgICAgICAgICAgICAgdmFyIGZvdW5kQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBhcnJheSBmb3IgaXRlbVxuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBhcnJheUlELmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcnJheUlEW2ldID09IGFycmF5SURbaF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZENvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKGZvdW5kQ291bnQgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSByZXBlYXRlZCBpdGVtIGZyb20gbmV3IGFycmF5XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaiA9IDA7IGogPCBuZXdBcnJheUlELmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihuZXdBcnJheUlEW2pdID09IGN1ckl0ZW0pIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QXJyYXlJRC5zcGxpY2UoaiwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaiA9IGogLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2coYXJyYXlJRCk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInNoaXJ0SURcIiwgSlNPTi5zdHJpbmdpZnkobmV3QXJyYXlJRCkpO1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICB9OyBcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgaW5pdDogaW5pdCxcbiAgICAgICAgc3RvcmFnZTogc3RvcmFnZVxuICAgIH07XG5cbn0pKCk7IiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBcblx0UEFHRSBNT0RVTEUgW3dpdGggUHJvbWlzZV1cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbkFQUC5wYWdlID0gKGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBfbWFpblNlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWFpbicpO1xuXG4gICAgZnVuY3Rpb24gc2hpcnRzKGRhdGEpIHtcbiAgICAgICAgQVBQLmRhdGEucmVxdWVzdCgnLi4vb3BkcmFjaHQvZGlzdC90ZW1wbGF0ZXMvc2hpcnRzLm1zdCcpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICBfbWFpblNlbGVjdG9yLmlubmVySFRNTCA9IE11c3RhY2hlLnJlbmRlcih0ZW1wbGF0ZSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgQVBQLmRhdGEuc3RvcmFnZSgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVGhlcmUgd2FzIGFuIGVycm9yIScsIGVyci5zdGF0dXNUZXh0KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBzaGlydERldGFpbChkYXRhLCBJRCkge1xuICAgICAgICAvKiBGaWx0ZXIgSUQgKi9cbiAgICAgICAgdmFyIGRldGFpbERhdGEgPSBfLmZpbHRlcihkYXRhLCBmdW5jdGlvbihjKXtcbiAgICAgICAgICAgIHJldHVybiBJRC5pbmRleE9mKGMuaWQpICE9IC0xXG4gICAgICAgIH0pOyAgICAgXG4gICAgICAgIFxuICAgICAgICBBUFAuZGF0YS5yZXF1ZXN0KCcuLi9vcGRyYWNodC9kaXN0L3RlbXBsYXRlcy9zaGlydC1kZXRhaWwubXN0JylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgIF9tYWluU2VsZWN0b3IuaW5uZXJIVE1MID0gTXVzdGFjaGUucmVuZGVyKHRlbXBsYXRlLCBkZXRhaWxEYXRhKTtcbiAgICAgICAgICAgICAgICBBUFAuZGF0YS5zdG9yYWdlKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdUaGVyZSB3YXMgYW4gZXJyb3IhJywgZXJyLnN0YXR1c1RleHQpO1xuICAgICAgICAgICAgfSk7ICAgICAgICBcbiAgICB9O1xuICAgIFxuICAgIGZ1bmN0aW9uIGZhdm91cml0ZXMoZGF0YSkge1xuICAgICAgICB2YXIgSUQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2hpcnRJRCcpO1xuICAgICAgICBcbiAgICAgICAgLyogRmlsdGVyIElEICovXG4gICAgICAgIHZhciBmYXZvdXJpdGVEYXRhID0gXy5maWx0ZXIoZGF0YSwgZnVuY3Rpb24oYyl7ICAgIFxuICAgICAgICAgICAgcmV0dXJuIElELmluZGV4T2YoYy5pZCkgIT0gLTFcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhmYXZvdXJpdGVEYXRhKVxuICAgICAgICBcbiAgICAgICAgQVBQLmRhdGEucmVxdWVzdCgnLi4vb3BkcmFjaHQvZGlzdC90ZW1wbGF0ZXMvZmF2b3VyaXRlcy5tc3QnKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgICAgX21haW5TZWxlY3Rvci5pbm5lckhUTUwgPSBNdXN0YWNoZS5yZW5kZXIodGVtcGxhdGUsIGZhdm91cml0ZURhdGEpOyBcbiAgICAgICAgICAgICAgICBBUFAuZGF0YS5zdG9yYWdlKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdUaGVyZSB3YXMgYW4gZXJyb3IhJywgZXJyLnN0YXR1c1RleHQpO1xuICAgICAgICAgICAgfSk7ICAgICAgICAgIFxuICAgIH07ICAgICAgIFxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2hpcnRzOiBzaGlydHMsXG4gICAgICAgIHNoaXJ0RGV0YWlsOiBzaGlydERldGFpbCxcbiAgICAgICAgZmF2b3VyaXRlczogZmF2b3VyaXRlc1xuICAgIH07XG5cbn0pKCk7IiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAgXG5cdFJPVVRFUiBNT0RVTEUgW3dpdGggcm91dGVyIGxpYjogUm91dGllXVxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLyAgICAgIFxuQVBQLnJvdXRlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gaW5pdCAoZGF0YSkge1xuICAgICAgICBpZiAoIXdpbmRvdy5sb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSAnI3NoaXJ0cyc7XG4gICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgcm91dGllKHtcbiAgICAgICAgICAgICdzaGlydHMnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBBUFAucGFnZS5zaGlydHMoZGF0YSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ3NoaXJ0LTpJRCc6IGZ1bmN0aW9uKElEKSB7XG4gICAgICAgICAgICAgICAgQVBQLnBhZ2Uuc2hpcnREZXRhaWwoZGF0YSwgSUQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdmYXZvdXJpdGVzJzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgQVBQLnBhZ2UuZmF2b3VyaXRlcyhkYXRhKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgICBpbml0OiBpbml0XG4gICAgfTsgICAgIFxuICAgIFxufSkoKTtcbiAgICAiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
